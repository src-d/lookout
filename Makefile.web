# Redefine targets from main Makefile

-include Makefile

# The @echo replaces the commands defined by `Makefile.main::$(COMMANDS)`
$(COMMANDS):
	@echo

# The @echo replaces the commands defined by `Makefile.main::dependencies`
dependencies:
	@echo

# The @echo replaces the commands defined by `Makefile.main::test`
test: web-test
	@echo

build: web-build web-pack

# To be used as -tags
WITH_STATIC_TAG := with_static

# Override Makefile.main defaults for arguments to be used in `go` commands.
GO_BUILD_ARGS := -ldflags "$(LD_FLAGS)" -tags "$(WITH_STATIC_TAG)"

FRONTEND_PATH := ./frontend
FRONTEND_BUILD_PATH := $(FRONTEND_PATH)/build

# Tools
YARN := yarn --cwd $(FRONTEND_PATH)
REMOVE := rm -rf
MOVE := mv
MKDIR := mkdir -p

# Environment and arguments to use in `go run` calls.
GO_RUN_ENV := LOG_LEVEL=DEBUG

GOCMD = go

build-path:
	$(MKDIR) $(BUILD_PATH)

.PHONY: web-build
web-build: build-path web-dependencies
	$(YARN) build
	$(REMOVE) $(BUILD_PATH)/public
	$(MOVE) $(FRONTEND_BUILD_PATH) $(BUILD_PATH)/public

.PHONY: web-dependencies
web-dependencies:
	$(YARN) install

.PHONY: web-test
web-test:
	CI=1 $(YARN) test

.PHONY: web-clean
web-clean:
	$(REMOVE) $(FRONTEND_PATH)/node_modules
	$(REMOVE) $(FRONTEND_BUILD_PATH)

.PHONY: web-pack
web-pack:
	mkdir -p ./web/assets; \
	$(ESC_BIN) \
		-pkg assets \
		-o ./web/assets/asset.go \
		build/public

.PHONY: web-start
web-start:
	$(GO_RUN_ENV) $(GOCMD) run cmd/lookoutd/*.go web

.PHONY: web-serve
web-serve: | web-build web-pack
	$(GO_RUN_ENV) $(GOCMD) run -tags "$(WITH_STATIC_TAG)" cmd/lookoutd/*.go web

.PHONY: lint
lint:
	$(YARN) lint
