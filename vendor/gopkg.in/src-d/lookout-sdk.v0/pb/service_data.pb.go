// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lookout/sdk/service_data.proto

package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import uast "gopkg.in/bblfsh/sdk.v1/uast"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// File is a repository file.
type File struct {
	// File path.
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// POSIX-style file mode.
	Mode uint32 `protobuf:"varint,2,opt,name=mode,proto3" json:"mode,omitempty"`
	// SHA1 hash of the file contents.
	Hash string `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	// Raw content of the file. It will be empty if WantContents was not set in
	// the request.
	Content []byte `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	// UAST is a Babelfish v1 UAST of the file contents. It will be empty if
	// WantUAST was not set in the request.
	UAST *uast.Node `protobuf:"bytes,5,opt,name=uast,proto3" json:"uast,omitempty"`
	// Programming/data/markup language of the file as returned by enry. It will
	// be empty unless WantLanguage or WantUAST were set in the request.
	Language string `protobuf:"bytes,6,opt,name=language,proto3" json:"language,omitempty"`
}

func (m *File) Reset()         { *m = File{} }
func (m *File) String() string { return proto.CompactTextString(m) }
func (*File) ProtoMessage()    {}
func (*File) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_data_cdd114f0940e7d0a, []int{0}
}
func (m *File) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *File) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_File.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *File) XXX_Merge(src proto.Message) {
	xxx_messageInfo_File.Merge(dst, src)
}
func (m *File) XXX_Size() int {
	return m.ProtoSize()
}
func (m *File) XXX_DiscardUnknown() {
	xxx_messageInfo_File.DiscardUnknown(m)
}

var xxx_messageInfo_File proto.InternalMessageInfo

// Change contains two versions of a File in a revision range.
type Change struct {
	// Base is the file version at the base of the revision range. It will be
	// empty for new files.
	Base *File `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	// Head is the file version at the head of the revision range. It will be
	// empty for deleted files.
	Head *File `protobuf:"bytes,2,opt,name=head,proto3" json:"head,omitempty"`
}

func (m *Change) Reset()         { *m = Change{} }
func (m *Change) String() string { return proto.CompactTextString(m) }
func (*Change) ProtoMessage()    {}
func (*Change) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_data_cdd114f0940e7d0a, []int{1}
}
func (m *Change) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Change) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Change.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Change) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Change.Merge(dst, src)
}
func (m *Change) XXX_Size() int {
	return m.ProtoSize()
}
func (m *Change) XXX_DiscardUnknown() {
	xxx_messageInfo_Change.DiscardUnknown(m)
}

var xxx_messageInfo_Change proto.InternalMessageInfo

// ChangesRequest defines a request of Changes to the Data service.
type ChangesRequest struct {
	// Base of the revision range.
	Base *ReferencePointer `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	// Head of the revision range.
	Head *ReferencePointer `protobuf:"bytes,2,opt,name=head,proto3" json:"head,omitempty"`
	// IncludePattern is a regexp. Only the files with matching file paths will
	// be included in the response.
	IncludePattern string `protobuf:"bytes,3,opt,name=include_pattern,json=includePattern,proto3" json:"include_pattern,omitempty"`
	// ExcludePattern is a regexp. Any files with matching file paths will be
	// excluded from the response.
	ExcludePattern string `protobuf:"bytes,4,opt,name=exclude_pattern,json=excludePattern,proto3" json:"exclude_pattern,omitempty"`
	// ExcludeVendored will exclude any verdored file from the response. The
	// list of paths considered as vendor is available at:
	// https://github.com/github/linguist/blob/master/lib/linguist/vendor.yml
	ExcludeVendored bool `protobuf:"varint,5,opt,name=exclude_vendored,json=excludeVendored,proto3" json:"exclude_vendored,omitempty"`
	// WantContents will fill the response file Content.
	WantContents bool `protobuf:"varint,6,opt,name=want_contents,json=wantContents,proto3" json:"want_contents,omitempty"`
	// WantUAST will fill the response file UAST and Language.
	WantUAST bool `protobuf:"varint,7,opt,name=want_uast,json=wantUast,proto3" json:"want_uast,omitempty"`
	// WantLanguage will fill the response file Language.
	WantLanguage bool `protobuf:"varint,8,opt,name=want_language,json=wantLanguage,proto3" json:"want_language,omitempty"`
	// IncludeLanguages will filter files by language. The language names are
	// case insensitive. The list of language names is available at
	// https://github.com/github/linguist/blob/master/lib/linguist/languages.yml
	IncludeLanguages []string `protobuf:"bytes,9,rep,name=include_languages,json=includeLanguages,proto3" json:"include_languages,omitempty"`
	// TwoDotsMode will calculate the changes between base..head
	// Its default value is false, working as base...head, that calculates the
	// changes introduced by head, not accessible by base.
	TwoDotsMode bool `protobuf:"varint,10,opt,name=two_dots_mode,json=twoDotsMode,proto3" json:"two_dots_mode,omitempty"`
}

func (m *ChangesRequest) Reset()         { *m = ChangesRequest{} }
func (m *ChangesRequest) String() string { return proto.CompactTextString(m) }
func (*ChangesRequest) ProtoMessage()    {}
func (*ChangesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_data_cdd114f0940e7d0a, []int{2}
}
func (m *ChangesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ChangesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangesRequest.Merge(dst, src)
}
func (m *ChangesRequest) XXX_Size() int {
	return m.Size()
}
func (m *ChangesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ChangesRequest proto.InternalMessageInfo

// FilesRequest defines a request of Files to the Data service.
type FilesRequest struct {
	// Revision of the file.
	Revision *ReferencePointer `protobuf:"bytes,1,opt,name=revision,proto3" json:"revision,omitempty"`
	// IncludePattern is a regexp. Only the files with matching file paths will
	// be included in the response.
	IncludePattern string `protobuf:"bytes,2,opt,name=include_pattern,json=includePattern,proto3" json:"include_pattern,omitempty"`
	// ExcludePattern is a regexp. Any files with matching file paths will be
	// excluded from the response.
	ExcludePattern string `protobuf:"bytes,3,opt,name=exclude_pattern,json=excludePattern,proto3" json:"exclude_pattern,omitempty"`
	// ExcludeVendored will exclude any verdored file from the response. The
	// list of paths considered as vendor is available at:
	// https://github.com/github/linguist/blob/master/lib/linguist/vendor.yml
	ExcludeVendored bool `protobuf:"varint,4,opt,name=exclude_vendored,json=excludeVendored,proto3" json:"exclude_vendored,omitempty"`
	// WantContents will fill the response file Content.
	WantContents bool `protobuf:"varint,5,opt,name=want_contents,json=wantContents,proto3" json:"want_contents,omitempty"`
	// WantUAST will fill the response file UAST and Language.
	WantUAST bool `protobuf:"varint,6,opt,name=want_uast,json=wantUast,proto3" json:"want_uast,omitempty"`
	// WantLanguage will fill the response file Language.
	WantLanguage bool `protobuf:"varint,7,opt,name=want_language,json=wantLanguage,proto3" json:"want_language,omitempty"`
	// IncludeLanguages will filter files by language. The language names are
	// case insensitive. The list of language names is available at
	// https://github.com/github/linguist/blob/master/lib/linguist/languages.yml
	IncludeLanguages []string `protobuf:"bytes,8,rep,name=include_languages,json=includeLanguages,proto3" json:"include_languages,omitempty"`
}

func (m *FilesRequest) Reset()         { *m = FilesRequest{} }
func (m *FilesRequest) String() string { return proto.CompactTextString(m) }
func (*FilesRequest) ProtoMessage()    {}
func (*FilesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_data_cdd114f0940e7d0a, []int{3}
}
func (m *FilesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FilesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FilesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *FilesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FilesRequest.Merge(dst, src)
}
func (m *FilesRequest) XXX_Size() int {
	return m.Size()
}
func (m *FilesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FilesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FilesRequest proto.InternalMessageInfo

func init() {
	proto.RegisterType((*File)(nil), "pb.File")
	proto.RegisterType((*Change)(nil), "pb.Change")
	proto.RegisterType((*ChangesRequest)(nil), "pb.ChangesRequest")
	proto.RegisterType((*FilesRequest)(nil), "pb.FilesRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DataClient is the client API for Data service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DataClient interface {
	// GetChanges returns a stream of Changes
	GetChanges(ctx context.Context, in *ChangesRequest, opts ...grpc.CallOption) (Data_GetChangesClient, error)
	// GetFiles returns a stream of Files
	GetFiles(ctx context.Context, in *FilesRequest, opts ...grpc.CallOption) (Data_GetFilesClient, error)
}

type dataClient struct {
	cc *grpc.ClientConn
}

func NewDataClient(cc *grpc.ClientConn) DataClient {
	return &dataClient{cc}
}

func (c *dataClient) GetChanges(ctx context.Context, in *ChangesRequest, opts ...grpc.CallOption) (Data_GetChangesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Data_serviceDesc.Streams[0], "/pb.Data/GetChanges", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataGetChangesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Data_GetChangesClient interface {
	Recv() (*Change, error)
	grpc.ClientStream
}

type dataGetChangesClient struct {
	grpc.ClientStream
}

func (x *dataGetChangesClient) Recv() (*Change, error) {
	m := new(Change)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataClient) GetFiles(ctx context.Context, in *FilesRequest, opts ...grpc.CallOption) (Data_GetFilesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Data_serviceDesc.Streams[1], "/pb.Data/GetFiles", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataGetFilesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Data_GetFilesClient interface {
	Recv() (*File, error)
	grpc.ClientStream
}

type dataGetFilesClient struct {
	grpc.ClientStream
}

func (x *dataGetFilesClient) Recv() (*File, error) {
	m := new(File)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DataServer is the server API for Data service.
type DataServer interface {
	// GetChanges returns a stream of Changes
	GetChanges(*ChangesRequest, Data_GetChangesServer) error
	// GetFiles returns a stream of Files
	GetFiles(*FilesRequest, Data_GetFilesServer) error
}

func RegisterDataServer(s *grpc.Server, srv DataServer) {
	s.RegisterService(&_Data_serviceDesc, srv)
}

func _Data_GetChanges_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChangesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataServer).GetChanges(m, &dataGetChangesServer{stream})
}

type Data_GetChangesServer interface {
	Send(*Change) error
	grpc.ServerStream
}

type dataGetChangesServer struct {
	grpc.ServerStream
}

func (x *dataGetChangesServer) Send(m *Change) error {
	return x.ServerStream.SendMsg(m)
}

func _Data_GetFiles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FilesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataServer).GetFiles(m, &dataGetFilesServer{stream})
}

type Data_GetFilesServer interface {
	Send(*File) error
	grpc.ServerStream
}

type dataGetFilesServer struct {
	grpc.ServerStream
}

func (x *dataGetFilesServer) Send(m *File) error {
	return x.ServerStream.SendMsg(m)
}

var _Data_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Data",
	HandlerType: (*DataServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetChanges",
			Handler:       _Data_GetChanges_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetFiles",
			Handler:       _Data_GetFiles_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "lookout/sdk/service_data.proto",
}

func (m *File) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *File) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Path) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintServiceData(dAtA, i, uint64(len(m.Path)))
		i += copy(dAtA[i:], m.Path)
	}
	if m.Mode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintServiceData(dAtA, i, uint64(m.Mode))
	}
	if len(m.Hash) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintServiceData(dAtA, i, uint64(len(m.Hash)))
		i += copy(dAtA[i:], m.Hash)
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintServiceData(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	if m.UAST != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintServiceData(dAtA, i, uint64(m.UAST.ProtoSize()))
		n1, err := m.UAST.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Language) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintServiceData(dAtA, i, uint64(len(m.Language)))
		i += copy(dAtA[i:], m.Language)
	}
	return i, nil
}

func (m *Change) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Change) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Base != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintServiceData(dAtA, i, uint64(m.Base.ProtoSize()))
		n2, err := m.Base.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Head != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintServiceData(dAtA, i, uint64(m.Head.ProtoSize()))
		n3, err := m.Head.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *ChangesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangesRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Base != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintServiceData(dAtA, i, uint64(m.Base.Size()))
		n4, err := m.Base.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Head != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintServiceData(dAtA, i, uint64(m.Head.Size()))
		n5, err := m.Head.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if len(m.IncludePattern) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintServiceData(dAtA, i, uint64(len(m.IncludePattern)))
		i += copy(dAtA[i:], m.IncludePattern)
	}
	if len(m.ExcludePattern) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintServiceData(dAtA, i, uint64(len(m.ExcludePattern)))
		i += copy(dAtA[i:], m.ExcludePattern)
	}
	if m.ExcludeVendored {
		dAtA[i] = 0x28
		i++
		if m.ExcludeVendored {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.WantContents {
		dAtA[i] = 0x30
		i++
		if m.WantContents {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.WantUAST {
		dAtA[i] = 0x38
		i++
		if m.WantUAST {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.WantLanguage {
		dAtA[i] = 0x40
		i++
		if m.WantLanguage {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.IncludeLanguages) > 0 {
		for _, s := range m.IncludeLanguages {
			dAtA[i] = 0x4a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.TwoDotsMode {
		dAtA[i] = 0x50
		i++
		if m.TwoDotsMode {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *FilesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FilesRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Revision != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintServiceData(dAtA, i, uint64(m.Revision.Size()))
		n6, err := m.Revision.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if len(m.IncludePattern) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintServiceData(dAtA, i, uint64(len(m.IncludePattern)))
		i += copy(dAtA[i:], m.IncludePattern)
	}
	if len(m.ExcludePattern) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintServiceData(dAtA, i, uint64(len(m.ExcludePattern)))
		i += copy(dAtA[i:], m.ExcludePattern)
	}
	if m.ExcludeVendored {
		dAtA[i] = 0x20
		i++
		if m.ExcludeVendored {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.WantContents {
		dAtA[i] = 0x28
		i++
		if m.WantContents {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.WantUAST {
		dAtA[i] = 0x30
		i++
		if m.WantUAST {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.WantLanguage {
		dAtA[i] = 0x38
		i++
		if m.WantLanguage {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.IncludeLanguages) > 0 {
		for _, s := range m.IncludeLanguages {
			dAtA[i] = 0x42
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func encodeVarintServiceData(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *File) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovServiceData(uint64(l))
	}
	if m.Mode != 0 {
		n += 1 + sovServiceData(uint64(m.Mode))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovServiceData(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovServiceData(uint64(l))
	}
	if m.UAST != nil {
		l = m.UAST.ProtoSize()
		n += 1 + l + sovServiceData(uint64(l))
	}
	l = len(m.Language)
	if l > 0 {
		n += 1 + l + sovServiceData(uint64(l))
	}
	return n
}

func (m *Change) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.ProtoSize()
		n += 1 + l + sovServiceData(uint64(l))
	}
	if m.Head != nil {
		l = m.Head.ProtoSize()
		n += 1 + l + sovServiceData(uint64(l))
	}
	return n
}

func (m *ChangesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovServiceData(uint64(l))
	}
	if m.Head != nil {
		l = m.Head.Size()
		n += 1 + l + sovServiceData(uint64(l))
	}
	l = len(m.IncludePattern)
	if l > 0 {
		n += 1 + l + sovServiceData(uint64(l))
	}
	l = len(m.ExcludePattern)
	if l > 0 {
		n += 1 + l + sovServiceData(uint64(l))
	}
	if m.ExcludeVendored {
		n += 2
	}
	if m.WantContents {
		n += 2
	}
	if m.WantUAST {
		n += 2
	}
	if m.WantLanguage {
		n += 2
	}
	if len(m.IncludeLanguages) > 0 {
		for _, s := range m.IncludeLanguages {
			l = len(s)
			n += 1 + l + sovServiceData(uint64(l))
		}
	}
	if m.TwoDotsMode {
		n += 2
	}
	return n
}

func (m *FilesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Revision != nil {
		l = m.Revision.Size()
		n += 1 + l + sovServiceData(uint64(l))
	}
	l = len(m.IncludePattern)
	if l > 0 {
		n += 1 + l + sovServiceData(uint64(l))
	}
	l = len(m.ExcludePattern)
	if l > 0 {
		n += 1 + l + sovServiceData(uint64(l))
	}
	if m.ExcludeVendored {
		n += 2
	}
	if m.WantContents {
		n += 2
	}
	if m.WantUAST {
		n += 2
	}
	if m.WantLanguage {
		n += 2
	}
	if len(m.IncludeLanguages) > 0 {
		for _, s := range m.IncludeLanguages {
			l = len(s)
			n += 1 + l + sovServiceData(uint64(l))
		}
	}
	return n
}

func sovServiceData(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozServiceData(x uint64) (n int) {
	return sovServiceData(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *File) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: File: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: File: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			m.Mode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mode |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthServiceData
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = append(m.Content[:0], dAtA[iNdEx:postIndex]...)
			if m.Content == nil {
				m.Content = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UAST", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UAST == nil {
				m.UAST = &uast.Node{}
			}
			if err := m.UAST.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Language", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Language = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServiceData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Change) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Change: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Change: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &File{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Head == nil {
				m.Head = &File{}
			}
			if err := m.Head.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServiceData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &ReferencePointer{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Head == nil {
				m.Head = &ReferencePointer{}
			}
			if err := m.Head.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludePattern", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IncludePattern = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExcludePattern", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExcludePattern = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExcludeVendored", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExcludeVendored = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WantContents", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WantContents = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WantUAST", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WantUAST = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WantLanguage", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WantLanguage = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeLanguages", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IncludeLanguages = append(m.IncludeLanguages, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TwoDotsMode", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TwoDotsMode = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipServiceData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FilesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FilesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FilesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revision", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Revision == nil {
				m.Revision = &ReferencePointer{}
			}
			if err := m.Revision.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludePattern", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IncludePattern = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExcludePattern", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExcludePattern = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExcludeVendored", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExcludeVendored = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WantContents", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WantContents = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WantUAST", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WantUAST = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WantLanguage", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WantLanguage = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeLanguages", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IncludeLanguages = append(m.IncludeLanguages, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServiceData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipServiceData(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowServiceData
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowServiceData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowServiceData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthServiceData
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowServiceData
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipServiceData(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthServiceData = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowServiceData   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("lookout/sdk/service_data.proto", fileDescriptor_service_data_cdd114f0940e7d0a)
}

var fileDescriptor_service_data_cdd114f0940e7d0a = []byte{
	// 640 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0x4f, 0x53, 0xd3, 0x4e,
	0x18, 0xc7, 0x9b, 0x36, 0x94, 0x74, 0x29, 0xfc, 0xf8, 0xed, 0x38, 0x63, 0xa6, 0xc3, 0xa4, 0xb5,
	0x1e, 0x0c, 0xc3, 0xb8, 0x41, 0xbc, 0x79, 0x71, 0x04, 0x46, 0x2e, 0xca, 0x30, 0x51, 0xf4, 0x58,
	0x37, 0xcd, 0x43, 0x92, 0xa1, 0xec, 0xd6, 0xec, 0xa6, 0xf8, 0x32, 0x7c, 0x09, 0x72, 0xf2, 0x85,
	0x78, 0xe1, 0xc8, 0xd1, 0x13, 0x62, 0x79, 0x23, 0xce, 0x6e, 0xfe, 0x40, 0x67, 0x50, 0xeb, 0x6d,
	0xf7, 0xfb, 0x7c, 0xf7, 0xbb, 0x7f, 0x3e, 0x79, 0x82, 0x9c, 0x11, 0xe7, 0xc7, 0x3c, 0x93, 0x9e,
	0x08, 0x8f, 0x3d, 0x01, 0xe9, 0x24, 0x19, 0xc2, 0x20, 0xa4, 0x92, 0x92, 0x71, 0xca, 0x25, 0xc7,
	0xf5, 0x71, 0xd0, 0x79, 0x1c, 0x25, 0x32, 0xce, 0x02, 0x32, 0xe4, 0x27, 0x5e, 0xc4, 0x23, 0xee,
	0xe9, 0x52, 0x90, 0x1d, 0xe9, 0x99, 0x9e, 0xe8, 0x51, 0xbe, 0xa4, 0xb3, 0x11, 0xf1, 0xf1, 0x71,
	0x44, 0x12, 0xe6, 0x05, 0xc1, 0xe8, 0x48, 0xc4, 0x2a, 0x9a, 0x4c, 0x9e, 0x78, 0x19, 0x15, 0xd2,
	0x8b, 0x80, 0x41, 0x4a, 0x25, 0x84, 0x85, 0xf9, 0xfe, 0xed, 0xfd, 0x61, 0x02, 0x4c, 0xe6, 0x85,
	0xfe, 0x37, 0x03, 0x99, 0x2f, 0x93, 0x11, 0x60, 0x8c, 0xcc, 0x31, 0x95, 0xb1, 0x6d, 0xf4, 0x0c,
	0xb7, 0xe5, 0xeb, 0xb1, 0xd2, 0x4e, 0x78, 0x08, 0x76, 0xbd, 0x67, 0xb8, 0xcb, 0xbe, 0x1e, 0x2b,
	0x2d, 0xa6, 0x22, 0xb6, 0x1b, 0xb9, 0x4f, 0x8d, 0xb1, 0x8d, 0x16, 0x87, 0x9c, 0x49, 0x60, 0xd2,
	0x36, 0x7b, 0x86, 0xdb, 0xf6, 0xcb, 0x29, 0x7e, 0x8e, 0x4c, 0x75, 0x1e, 0x7b, 0xa1, 0x67, 0xb8,
	0x4b, 0x5b, 0x0f, 0x48, 0x79, 0x66, 0x92, 0x9f, 0x99, 0xe4, 0x67, 0x26, 0xca, 0x43, 0xf6, 0x79,
	0x08, 0xdb, 0xd6, 0xf4, 0xb2, 0x6b, 0x1e, 0xbe, 0x78, 0xf3, 0xd6, 0xd7, 0x0b, 0x71, 0x07, 0x59,
	0x23, 0xca, 0xa2, 0x8c, 0x46, 0x60, 0x37, 0xf5, 0x96, 0xd5, 0xfc, 0x99, 0xf5, 0xe5, 0xac, 0x5b,
	0xbb, 0x3a, 0xeb, 0x1a, 0xfd, 0x7d, 0xd4, 0xdc, 0x89, 0x29, 0x8b, 0x00, 0xaf, 0x21, 0x33, 0xa0,
	0x02, 0xf4, 0x35, 0x96, 0xb6, 0x2c, 0x32, 0x0e, 0x88, 0xba, 0x9e, 0xaf, 0x55, 0x55, 0x8d, 0x81,
	0x86, 0xfa, 0x42, 0x33, 0x55, 0xa5, 0xde, 0xca, 0xfb, 0xda, 0x40, 0x2b, 0x79, 0xa0, 0xf0, 0xe1,
	0x63, 0x06, 0x42, 0x62, 0x77, 0x26, 0xf8, 0x9e, 0x5a, 0xea, 0xc3, 0x11, 0xa4, 0xc0, 0x86, 0x70,
	0xc0, 0x13, 0x26, 0x21, 0x2d, 0x36, 0x71, 0x67, 0x36, 0xf9, 0x8d, 0x53, 0x39, 0xf0, 0x23, 0xf4,
	0x5f, 0xc2, 0x86, 0xa3, 0x2c, 0x84, 0xc1, 0x98, 0x4a, 0x09, 0x29, 0x2b, 0x9e, 0x75, 0xa5, 0x90,
	0x0f, 0x72, 0x55, 0x19, 0xe1, 0xd3, 0xac, 0xd1, 0xcc, 0x8d, 0x85, 0x5c, 0x1a, 0xd7, 0xd1, 0x6a,
	0x69, 0x9c, 0x00, 0x0b, 0x79, 0x0a, 0xa1, 0x7e, 0x7b, 0xcb, 0x2f, 0x03, 0xde, 0x15, 0x32, 0x7e,
	0x88, 0x96, 0x4f, 0x29, 0x93, 0x83, 0x02, 0x95, 0xd0, 0xcf, 0x6b, 0xf9, 0x6d, 0x25, 0xee, 0x14,
	0x1a, 0x5e, 0x47, 0x2d, 0x6d, 0xd2, 0x10, 0x17, 0x95, 0x61, 0xbb, 0x3d, 0xbd, 0xec, 0x5a, 0xef,
	0x29, 0x93, 0x9a, 0x92, 0xa5, 0xca, 0x87, 0x8a, 0x54, 0x99, 0x57, 0xe1, 0xb2, 0x6e, 0xf2, 0x5e,
	0x15, 0x1a, 0xde, 0x40, 0xff, 0x97, 0x37, 0x2e, 0x7d, 0xc2, 0x6e, 0xf5, 0x1a, 0x6e, 0xcb, 0x5f,
	0x2d, 0x0a, 0xa5, 0x57, 0xe0, 0x3e, 0x5a, 0x96, 0xa7, 0x7c, 0x10, 0x72, 0x29, 0x06, 0xfa, 0x3b,
	0x44, 0x3a, 0x71, 0x49, 0x9e, 0xf2, 0x5d, 0x2e, 0xc5, 0x6b, 0x1e, 0x42, 0xff, 0x47, 0x1d, 0xb5,
	0x15, 0xc2, 0x8a, 0xd3, 0x26, 0xb2, 0x52, 0x98, 0x24, 0x22, 0xe1, 0xec, 0x8f, 0xac, 0x2a, 0xd7,
	0x5d, 0x14, 0xea, 0xf3, 0x52, 0x68, 0xcc, 0x4d, 0xc1, 0x9c, 0x93, 0xc2, 0xc2, 0xdf, 0x28, 0x34,
	0xff, 0x8d, 0xc2, 0xe2, 0xbc, 0x14, 0xac, 0xbb, 0x29, 0x6c, 0x7d, 0x40, 0xe6, 0x2e, 0x95, 0x14,
	0x13, 0x84, 0xf6, 0x40, 0x16, 0x5d, 0x81, 0xb1, 0x7a, 0xd4, 0xd9, 0x16, 0xe9, 0xa0, 0x1b, 0x6d,
	0xd3, 0xc0, 0x2e, 0xb2, 0xf6, 0x40, 0x6a, 0x36, 0x78, 0xb5, 0xec, 0xb4, 0xca, 0x5b, 0xf5, 0xde,
	0xa6, 0xb1, 0xbd, 0x76, 0xfe, 0xd3, 0xa9, 0x9d, 0x4f, 0x1d, 0xe3, 0x62, 0xea, 0x18, 0x57, 0x53,
	0xc7, 0xf8, 0x7c, 0xed, 0xd4, 0x2e, 0xae, 0x9d, 0xda, 0xf7, 0x6b, 0xa7, 0x16, 0x34, 0xf5, 0x8f,
	0xea, 0xe9, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe8, 0x3b, 0x87, 0x79, 0x43, 0x05, 0x00, 0x00,
}
