/*
 * Copyright 2018 source{d}. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";
package pb;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";

option (gogoproto.goproto_getters_all) = false;

// CommitRevision defines a range of commits, from a base to a head.
message CommitRevision {
    // Base of the revision.
    ReferencePointer base = 1 [(gogoproto.nullable) = false];
    // Head of the revision.
    ReferencePointer head = 2 [(gogoproto.nullable) = false];
}

// ReferencePointer is the reference to a git refererence in a repository.
message ReferencePointer {
    // InternalRepositoryURL is the original clone URL, not canonicalized.
    string internal_repository_url = 1 [(gogoproto.customname) = "InternalRepositoryURL"];
    // ReferenceName is the name of the reference pointing.
    string reference_name = 2 [(gogoproto.casttype) = "gopkg.in/src-d/go-git.v4/plumbing.ReferenceName"];
    // Hash is the hash of the reference pointing.
    string hash = 3;
}

// PushEvent represents a Push to a git repository.
message PushEvent {
    // Provider triggering this event.
    string provider = 1;
    // InternalId is the internal id for this event at the provider.
    string internal_id = 2 [(gogoproto.customname) = "InternalID"];
    // CreateAt is the timestamp of the creation date of the push event.
    google.protobuf.Timestamp created_at = 3 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
    // Commits is the number of commits in the push.
    uint32 commits = 4;
    // Commits is the number of distinct commits in the push.
    uint32 distinct_commits = 5;
    // Configuration contains any configuration related to specific analyzer
    google.protobuf.Struct configuration = 6 [(gogoproto.nullable) = false];

    CommitRevision commit_revision = 7 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
}

// ReviewEvent represents a Review (PullRequest in case of Github) being created or updated.
message ReviewEvent {
    // UAST uses protosizer instead of sizer, this is required for interoperability
    // with the generated proto from bblfsh.
    option (gogoproto.protosizer) = false;

    // Provider triggering this event.
    string provider = 1;
    // InternalId is the internal id for this event at the provider.
    string internal_id = 2 [(gogoproto.customname) = "InternalID"];
    // CreateAt is the timestamp of the creation date of the push event.
    google.protobuf.Timestamp created_at = 3 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
    // UpdatedAt is the timestamp of the last modification of the pull request.
    google.protobuf.Timestamp updated_at = 4 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
    // IsMergeable, if the pull request is mergeable.
    bool is_mergeable = 5;
    // Source reference to the original branch and repository where the changes came from.
    ReferencePointer source = 8 [(gogoproto.nullable) = false];
    // Merge reference to the branch and repository where the merged Pull Request is stored.
    ReferencePointer merge = 9 [(gogoproto.nullable) = false];
    // Configuration contains any configuration related to specific analyzer
    google.protobuf.Struct configuration = 10 [(gogoproto.nullable) = false];
    // RepositoryId is internal provider repository id
    uint32 repository_id = 11 [(gogoproto.customname) = "RepositoryID"];
    // Number is internal provider id of review scoped by repository
    uint32 number = 12;

    CommitRevision commit_revision = 7 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
}
